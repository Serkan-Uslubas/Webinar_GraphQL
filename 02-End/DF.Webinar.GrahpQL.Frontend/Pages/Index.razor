@page "/"
@using MudBlazor
@using System.Runtime.InteropServices;
@using Radzen.Blazor
@using Radzen;

<PageTitle>Books</PageTitle>

<UseGetBooks Context="result"
             Strategy="ExecutionStrategy.CacheFirst"
             Filter="@filter"
             Order="@order"
             Skip="@skip"
             Take="@take">

    <ChildContent>
        <RadzenDataGrid 
            TItem="IGetBooks_Books_Items"
            @ref="itemsGrid"
            Data="result.Books?.Items"

            IsLoading=@isLoading
            
            AllowSorting="true"
            Sort="@OnSort"

            AllowFiltering="true"
            AllowColumnResize="true"
            FilterMode="FilterMode.Simple"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            LogicalFilterOperator="LogicalFilterOperator.And"
            
            AllowPaging="true"
            Count="@count"
            PageSizeOptions="new int[] { 10, 20, 50, 100 }"
            ShowPagingSummary= "true"
            PagingSummaryFormat= "Displaying page {0} of {1} (total {2} records)"
            PageSizeChanged="@PageSizeChanged"
            Page="@OnPage"
            PagerPosition=PagerPosition.Bottom
            PagerHorizontalAlign="HorizontalAlign.Center"


            style="height: 650px"
            ColumnWidth="200px">

            <Columns>

                <RadzenDataGridColumn 
                    TItem="IGetBooks_Books_Items"
                    Property="@nameof(IGetBooks_Books_Items.Title)"
                    Title="@nameof(IGetBooks_Books_Items.Title)"
                    Width="80px"/>

                <RadzenDataGridColumn 
                    TItem="IGetBooks_Books_Items"
                    Property="@nameof(IGetBooks_Books_Items.Description)"
                    Title="@nameof(IGetBooks_Books_Items.Description)"
                    Width="160px" />

                <RadzenDataGridColumn 
                    TItem="IGetBooks_Books_Items"
                    Property="@nameof(IGetBooks_Books_Items.Author.LastName)"
                    Title="@nameof(IGetBooks_Books_Items.Author.LastName)"
                    Width="80px"/>
            </Columns>
    </RadzenDataGrid>

    </ChildContent>

</UseGetBooks>

@code {

    RadzenDataGrid<IGetBooks_Books_Items>? itemsGrid = new RadzenDataGrid<IGetBooks_Books_Items>();

    int count = 13;
    bool isLoading = false;

    // Filter Parameter
    int skip = 0;
    int take = 10;
    BookFilterInput filter = new BookFilterInput();
    BookSortInput order = new BookSortInput();

    async void OnSort<T>(DataGridColumnSortEventArgs<T> args) 
    {
        if (order.GetType().GetProperties().Select(x => x.Name).Contains(args.Column.Title)) 
        {
            if (args.SortOrder.Equals(SortOrder.Descending)) 
            {
                order.GetType().GetProperty(args.Column.Title).SetValue(order, SortEnumType.Desc, null);
            }
            else 
            {
                order.GetType().GetProperty(args.Column.Title).SetValue(order, SortEnumType.Asc, null);
            }
            itemsGrid.Reset(true);
            await itemsGrid.FirstPage(true);
        }
    }

    async void OnPage(PagerEventArgs args) 
    {
        skip = args.Skip;
        take = args.Top;
        itemsGrid.Reset(true);
        await itemsGrid.FirstPage(true);

    }

    async void PageSizeChanged(int pageSize) 
    {
        take = pageSize;
        itemsGrid.Reset(true);
        await itemsGrid.FirstPage(true);
    }
}