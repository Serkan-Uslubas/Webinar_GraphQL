@page "/"
@using MudBlazor
@using System.Runtime.InteropServices;

@*@inject graphClient graphQLClient;*@

<PageTitle>Books</PageTitle>


<UseGetBooks 
    Context="result" 
    Strategy="ExecutionStrategy.CacheFirst"
    Filter="@filter"
    Order="@order"
    Skip="@skip"
    Take="@take">

    <ChildContent>

         <MudTable Items="result.Books?.Items"
            Dense="true" 
            Hover="true" 
            Elevation="0">

            <ToolBarContent>
                <MudText Typo="Typo.h6">Books overview</MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
@*            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="title_field" T="IGetBooks_Books_Items">Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="description_field" T="IGetBooks_Books_Items">Description</MudTableSortLabel></MudTh>
            </HeaderContent>*@
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
            </RowTemplate>
@*            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>*@
        </MudTable>

    </ChildContent>

</UseGetBooks>



@code {
//    private bool isLoading = false;
//    //private IEnumerable<Element> Elements = new List<Element>();
//    private IEnumerable<IGetBooks_Books_Items> pagedData;
//    private MudTable<IGetBooks_Books_Items> table;

//    private int totalItems;
    private string searchString = null;

//    // Filter Parameter
    int skip = 0;
    int take = 5;
    BookFilterInput filter = new BookFilterInput();
    BookSortInput order = new BookSortInput();


//    private string[] titles = Array.Empty<string>();
//    private IDisposable storeSession;

    //protected override async Task OnInitializedAsync() {
    //    //Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    //}


    ///// <summary>
    ///// Here we simulate getting the paged, filtered and ordered data from the server
    ///// </summary>
    //private async Task<TableData<IGetBooks_Books_Items>> ServerReload(TableState state) {
    //    isLoading = true;
        
    //    storeSession =
    //        graphClient
    //            .Watch(ExecutionStrategy.CacheFirst) // <----
    //            .Where(t => !t.Errors.Any())
    //            .Select(t => t.Data!.Sessions!.Nodes)
    //            .Subscribe(result => {
    //                items = result;
    //                StateHasChanged();
    //            });


    //    var result = await graphQLClient.GetBooks.ExecuteAsync(skip, take, filter, sorter);
    //    var count = result.Data.Books?.TotalCount ?? 0;
    //    pagedData = result.Data.Books?.Items;
    //    return new TableData<IGetBooks_Books_Items>() { TotalItems = count, Items = pagedData };

        
    //    isLoading = false;
    //}

    private void OnSearch(string text) {
        var filterInput = new StringOperationFilterInput();
        filterInput.Contains = text;
        filter.Title = filterInput;
    }
}